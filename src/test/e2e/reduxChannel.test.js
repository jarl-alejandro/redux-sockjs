import { createStore, combineReducers } from 'redux'
import { startReduxServer } from '../../../server'
import { startReduxClient } from '../../../client'
import defaultHttpServer from '../../server/defaultHttpServer'

describe('startReduxChannel for server and client', function testStartReduxChannel() {
  this.slow(1000)
  it('emit redux', done => {
    const httpServer = defaultHttpServer()
    const param = {
      ip: '127.0.0.1',
      port: 10002,
      sockjsPrefix: '/sockjs-redux',
      reconnectInterval: 0,
    }
    const serverChannel = startReduxServer({ ...param, server: httpServer })
    const clientChannel = startReduxClient(param)

    const clientData = { type: 'abc', payload: 'xxxxx' }
    clientChannel.on('open', () => {
      clientChannel.send(clientData)
    })
    serverChannel.receive(data => {
      expect(data).toEqual(clientData)
      serverChannel.emitter.connection.close()
      httpServer.close()
      done()
    })
  })

  describe('use store in client and server', () => {
    const param = {
      ip: '127.0.0.1',
      port: 10003,
      sockjsPrefix: '/sockjs-redux',
      reconnectInterval: 0,
    }


    it('client send action', done => {
      const userReducer = (state = [], action) => {
        if (action.type === 'ADD_USER') {
          return [...state, action.payload]
        }
        return state
      }

      const clientReducer = (state = [], action) => {
        if (action.type === 'ADD_CLIENT') {
          return [...state, action.payload]
        }
        return state
      }
      // const serverStore = createStore(reducer, initialState)
      const clientStore = createStore(combineReducers({
        user: userReducer,
        client: clientReducer,
      }))

      const httpServer = defaultHttpServer()
      const serverChannel = startReduxServer({ ...param, server: httpServer })
      const clientChannel = startReduxClient(param)

      const clientData = { type: 'ADD_USER', payload: { user: 'tom' } }
      clientChannel.on('open', () => {
        clientChannel.send(clientData)
      })

      clientChannel.receive(action => {
        clientStore.dispatch(action)
        const state = clientStore.getState()
        expect(state.user[0].id).toBe(123)
        serverChannel.emitter.connection.close()
        httpServer.close()
        done()
      })
      serverChannel.receive(action => {
        // serverStore.dispatch(action)
        // id is generated by server db
        serverChannel.send({ ...action, payload: { user: 'tom', id: 123 } })
      })
    })
  })
})
